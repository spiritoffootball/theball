/*
================================================================================
addComment Javascript
================================================================================
AUTHOR: Christian Wach <needle@haystack.co.uk>
--------------------------------------------------------------------------------
NOTES

This script is only included when our theme is active 

The moveForm() method is called by onclick attributes of the 
"Reply to this comment" links, which are auto-generated by WP.

This is a rewritten version of the inbuilt Wordpress addComment 
object because we want to amend a few things...

--------------------------------------------------------------------------------
*/






/** 
 * @description: comment area handler object
 * @todo:
 *
 */	
addComment = {



	/** 
	 * @description: method for moving the comment form
	 * @todo:
	 *
	 */	
	moveForm : function( commentID, parentID, respondID, postID ) {
	

		
		// properties
		var div_e;
		var comm_e = this.I(commentID);
		var respond_e = this.I(respondID);
		var cancel_e = this.I('cancel-comment-reply-link');
		var parent_e = this.I('comment_parent');
		var post_e = this.I('comment_post_ID');


		
		// sanity check
		if ( !comm_e || !respond_e || !cancel_e || !parent_e ) {
		
			// --<
			return;
			
		}


		
		// show respond element
		respond_e.style.display = 'block';

		// if we have them...
		if ( post_e && postID ) {
		
			// set comment_post_ID hidden input to postID
			post_e.value = postID;
			
		}
		
		// set comment_parent hidden input to parentID
		parent_e.value = parentID;
		//alert( 'parent_e.value set: ' + parent_e.value );
		
		// store respondID for cancel method to access
		this.respondID = respondID;
		


		// do we have a temp div?
		if ( ! this.I('wp-temp-form-div') ) {
			
			// create one
			div_e = document.createElement('div');
			div_e.id = 'wp-temp-form-div';
			div_e.style.display = 'none';
			respond_e.parentNode.insertBefore( div_e, respond_e );
			
		}



		// insert comment response area
		comm_e.parentNode.insertBefore( respond_e, comm_e.nextSibling );
		
		
		
		// hide this reply link
		if ( parentID != '0' ) {
			jQuery( '#comment-' + parentID + ' > .reply' ).css('display', 'none');
		}

		
		
		// show cancel link
		cancel_e.style.display = '';

		
		
		/** 
		 * @description: method for cancel button
		 * @todo:
		 *
		 */	
		cancel_e.onclick = function() {
		
			// get our temp div element
			var temp_e = addComment.I('wp-temp-form-div');
			
			// get our comment response element
			var respond_e = addComment.I(addComment.respondID);
			
			// sanity check
			if ( !temp_e || !respond_e ) {
			
				// --<
				return;
				
			}



			// unset comment parent value
			addComment.I('comment_parent').value = '0';
			
			
			
			// DOM manipulation
			temp_e.parentNode.insertBefore( respond_e, temp_e );
			temp_e.parentNode.removeChild( temp_e );
			
			
			
			// show reply link
			jQuery( '#comment-' + parentID + ' > .reply' ).css('display', 'block');



			// hide cancel link
			this.style.display = 'none';
			
			// disable this until next run
			this.onclick = null;
			
			
			
			// --<
			return false;
			
		}

		
		
		// try and give focus to textarea - disabled since we use tinyMCE
		//try { this.I('comment').focus(); }
		//catch(e) {}
		


		// --<
		return false;
		
	},
	
	
	
	/** 
	 * @description: utility get element ID method
	 * @todo:
	 *
	 */	
	I : function(e) {
	
		// --<
		return document.getElementById(e);
		
	}
	
	
	
}

